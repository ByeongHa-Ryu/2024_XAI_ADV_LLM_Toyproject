{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Toy Project\n",
    "\n",
    "### ▪ 목표\n",
    "사전 학습된 라벨링 모델을 사용하여 소비 내역 데이터를 분석하고, 그 결과를 Gradio의 챗봇 형식으로 사용자에게 제공"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from fastapi import FastAPI, HTTPException\n",
    "from pydantic import BaseModel\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from typing import List\n",
    "import gradio as gr\n",
    "from transformers import pipeline, BertTokenizer\n",
    "from kobert_transformers import get_kobert_model\n",
    "import requests\n",
    "\n",
    "import os\n",
    "import fitz  # PyMuPDF for PDF processing\n",
    "import pickle\n",
    "import pytesseract  # OCR 라이브러리\n",
    "from PIL import Image  # 이미지를 열기 위한 라이브러리\n",
    "\n",
    "# Langchain 관련 라이브러리\n",
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "from langchain.embeddings import HuggingFaceEmbeddings\n",
    "from langchain.vectorstores import FAISS\n",
    "\n",
    "# HWP 파일 처리를 위한 라이브러리\n",
    "import pyhwp  # 추가\n",
    "\n",
    "# 환경 변수 로드를 위한 라이브러리\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "# Langchain 추가 라이브러리\n",
    "from langchain.prompts import PromptTemplate\n",
    "from langchain_core.output_parsers import StrOutputParser, BaseOutputParser\n",
    "from langchain_openai import ChatOpenAI\n",
    "from langchain_experimental.agents import create_pandas_dataframe_agent\n",
    "from langchain.agents.agent_types import AgentType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No virtual environment is active.\n",
      ".env loaded :  True\n"
     ]
    }
   ],
   "source": [
    "# 가상환경 확인 및 env 파일 Load \n",
    "virtual_env = os.environ.get('VIRTUAL_ENV')\n",
    "if virtual_env:\n",
    "    print(\"Virtual environment is active.\")\n",
    "    print(\"Virtual Environment Path:\", virtual_env)\n",
    "else:\n",
    "    print(\"No virtual environment is active.\")\n",
    "\n",
    "# .env 파일 로드\n",
    "print('.env loaded : ', load_dotenv())\n",
    "\n",
    "# 환경 변수에서 API 키 가져오기\n",
    "API_KEY = os.getenv(\"OPENAI_API_KEY\")\n",
    "\n",
    "# API_KEY가 제대로 로드되었는지 확인\n",
    "if not API_KEY:\n",
    "    raise ValueError(\"API_KEY가 설정되지 않았습니다. .env 파일에 OPENAI_API_KEY를 설정하세요.\")\n",
    "\n",
    "# LLM 초기화\n",
    "llm = ChatOpenAI(temperature=0.1, openai_api_key=API_KEY)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DF 작업 - 각 계좌내역과 이름 넣기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>거래일시</th>\n",
       "      <th>적요</th>\n",
       "      <th>의뢰인/수취인</th>\n",
       "      <th>내통장표시내용</th>\n",
       "      <th>출금금액</th>\n",
       "      <th>입금금액</th>\n",
       "      <th>잔액</th>\n",
       "      <th>취급점</th>\n",
       "      <th>구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-07-01 17:15:47</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,800</td>\n",
       "      <td>0</td>\n",
       "      <td>33,578</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-07-01 17:15:09</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12,800</td>\n",
       "      <td>46,378</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-07-01 16:29:37</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,800</td>\n",
       "      <td>0</td>\n",
       "      <td>33,578</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소된거래</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  거래일시    적요    의뢰인/수취인 내통장표시내용    출금금액    입금금액      잔액   취급점  \\\n",
       "0  2024-07-01 17:15:47  체크카드  시외버스모바일(티     NaN  12,800       0  33,578  KB카드   \n",
       "1  2024-07-01 17:15:09  체크카드  시외버스모바일(티     NaN       0  12,800  46,378  KB카드   \n",
       "2  2024-07-01 16:29:37  체크카드  시외버스모바일(티     NaN  12,800       0  33,578  KB카드   \n",
       "\n",
       "      구분  \n",
       "0      　  \n",
       "1     취소  \n",
       "2  취소된거래  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('전처리_내역.csv')\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>이름</th>\n",
       "      <th>계좌번호</th>\n",
       "      <th>거래일시</th>\n",
       "      <th>적요</th>\n",
       "      <th>의뢰인/수취인</th>\n",
       "      <th>내통장표시내용</th>\n",
       "      <th>출금금액</th>\n",
       "      <th>입금금액</th>\n",
       "      <th>잔액</th>\n",
       "      <th>취급점</th>\n",
       "      <th>구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>한윤지</td>\n",
       "      <td>12345</td>\n",
       "      <td>2024-07-01 17:15:47</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,800</td>\n",
       "      <td>0</td>\n",
       "      <td>33,578</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>한윤지</td>\n",
       "      <td>12345</td>\n",
       "      <td>2024-07-01 17:15:09</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12,800</td>\n",
       "      <td>46,378</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>한윤지</td>\n",
       "      <td>12345</td>\n",
       "      <td>2024-07-01 16:29:37</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>시외버스모바일(티</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,800</td>\n",
       "      <td>0</td>\n",
       "      <td>33,578</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소된거래</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    이름   계좌번호                 거래일시    적요    의뢰인/수취인 내통장표시내용    출금금액    입금금액  \\\n",
       "0  한윤지  12345  2024-07-01 17:15:47  체크카드  시외버스모바일(티     NaN  12,800       0   \n",
       "1  한윤지  12345  2024-07-01 17:15:09  체크카드  시외버스모바일(티     NaN       0  12,800   \n",
       "2  한윤지  12345  2024-07-01 16:29:37  체크카드  시외버스모바일(티     NaN  12,800       0   \n",
       "\n",
       "       잔액   취급점     구분  \n",
       "0  33,578  KB카드      　  \n",
       "1  46,378  KB카드     취소  \n",
       "2  33,578  KB카드  취소된거래  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>이름</th>\n",
       "      <th>계좌번호</th>\n",
       "      <th>거래일시</th>\n",
       "      <th>적요</th>\n",
       "      <th>의뢰인/수취인</th>\n",
       "      <th>내통장표시내용</th>\n",
       "      <th>출금금액</th>\n",
       "      <th>입금금액</th>\n",
       "      <th>잔액</th>\n",
       "      <th>취급점</th>\n",
       "      <th>구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 12:40:05</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>13,000</td>\n",
       "      <td>13,061</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-03 12:56:19</td>\n",
       "      <td>스마트출금</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>600,000</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>청주중</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-03 12:55:36</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>임진희</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>600,000</td>\n",
       "      <td>600,061</td>\n",
       "      <td>신용협동</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      이름   계좌번호                 거래일시     적요 의뢰인/수취인 내통장표시내용     출금금액     입금금액  \\\n",
       "150  손아현  67890  2024-04-06 12:40:05   전자금융     한윤지     NaN        0   13,000   \n",
       "151  손아현  67890  2024-04-03 12:56:19  스마트출금     한윤지     한윤지  600,000        0   \n",
       "152  손아현  67890  2024-04-03 12:55:36   전자금융     임진희     NaN        0  600,000   \n",
       "\n",
       "          잔액   취급점 구분  \n",
       "150   13,061    카뱅  　  \n",
       "151       61   청주중  　  \n",
       "152  600,061  신용협동  　  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 현재 데이터프레임의 행 수 확인\n",
    "num_rows = len(df)\n",
    "\n",
    "# '이름'과 'account_number' 컬럼 추가\n",
    "df.insert(0, '이름', ['한윤지' if i < 100 else '손아현' for i in range(num_rows)])\n",
    "df.insert(1, '계좌번호', ['12345' if i < 100 else '67890' for i in range(num_rows)])\n",
    "\n",
    "display(df.head(3))\n",
    "display(df.tail(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>이름</th>\n",
       "      <th>계좌번호</th>\n",
       "      <th>거래일시</th>\n",
       "      <th>적요</th>\n",
       "      <th>의뢰인/수취인</th>\n",
       "      <th>내통장표시내용</th>\n",
       "      <th>출금금액</th>\n",
       "      <th>입금금액</th>\n",
       "      <th>잔액</th>\n",
       "      <th>취급점</th>\n",
       "      <th>구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-05 12:33:52</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>50,000</td>\n",
       "      <td>53,877</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-04 19:48:41</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>탐앤탐스</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5,000</td>\n",
       "      <td>0</td>\n",
       "      <td>3,877</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-04 12:37:25</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>바스켓테이블</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5,500</td>\n",
       "      <td>0</td>\n",
       "      <td>8,877</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-04 11:24:42</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>14,377</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-03 15:45:42</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>공차국민대점</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,200</td>\n",
       "      <td>0</td>\n",
       "      <td>24,377</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-02 18:01:54</td>\n",
       "      <td>기일출금</td>\n",
       "      <td>35460904034367</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18,850</td>\n",
       "      <td>0</td>\n",
       "      <td>36,577</td>\n",
       "      <td>수유동</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-02 10:30:17</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>이마트24R국민대예</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,600</td>\n",
       "      <td>0</td>\n",
       "      <td>55,427</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-02 10:29:27</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>50,000</td>\n",
       "      <td>58,027</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-01 20:05:16</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>탐앤탐스</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4,400</td>\n",
       "      <td>0</td>\n",
       "      <td>8,027</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-01 19:25:14</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>긴자료코성신여대점</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13,000</td>\n",
       "      <td>0</td>\n",
       "      <td>12,427</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-01 16:32:42</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>카페엘리</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5,800</td>\n",
       "      <td>0</td>\n",
       "      <td>25,427</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-05-01 15:42:07</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>인터넷상거래_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>31,227</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 19:02:03</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>얼음왕국</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,800</td>\n",
       "      <td>0</td>\n",
       "      <td>41,227</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 18:53:45</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>불닭엽기떡볶이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18,000</td>\n",
       "      <td>0</td>\n",
       "      <td>43,027</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 14:53:55</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>탐앤탐스</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4,500</td>\n",
       "      <td>0</td>\n",
       "      <td>61,027</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 13:31:40</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>김밥천국</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11,000</td>\n",
       "      <td>0</td>\n",
       "      <td>65,527</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 11:51:01</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>티머니개인택시_0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,500</td>\n",
       "      <td>0</td>\n",
       "      <td>76,527</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-29 11:48:21</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17,200</td>\n",
       "      <td>0</td>\n",
       "      <td>89,027</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-28 12:32:29</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51,280</td>\n",
       "      <td>0</td>\n",
       "      <td>106,227</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-27 16:39:28</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>리틀포레스트</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,000</td>\n",
       "      <td>0</td>\n",
       "      <td>157,507</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-27 16:22:51</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42,199</td>\n",
       "      <td>0</td>\n",
       "      <td>158,507</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-27 15:52:24</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>카뱅오픈한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400,000</td>\n",
       "      <td>0</td>\n",
       "      <td>200,706</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-27 10:13:26</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>쿠팡(와우멤버십)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4,990</td>\n",
       "      <td>0</td>\n",
       "      <td>600,706</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-25 10:36:18</td>\n",
       "      <td>기일입금</td>\n",
       "      <td>한효전</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>600,000</td>\n",
       "      <td>605,696</td>\n",
       "      <td>청주중</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-24 11:06:02</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>5,696</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-22 20:02:23</td>\n",
       "      <td>FBS출금</td>\n",
       "      <td>KT통신요금04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17,600</td>\n",
       "      <td>0</td>\n",
       "      <td>15,696</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-22 19:57:09</td>\n",
       "      <td>FBS출금</td>\n",
       "      <td>KT4489689404</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,510</td>\n",
       "      <td>0</td>\n",
       "      <td>33,296</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-22 13:22:24</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>1060국민카드</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>43,806</td>\n",
       "      <td>우리은행</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-21 18:11:28</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17,200</td>\n",
       "      <td>0</td>\n",
       "      <td>43,805</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-21 12:42:24</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>카뱅오픈(주)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>410,000</td>\n",
       "      <td>0</td>\n",
       "      <td>61,005</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-21 12:41:36</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>336,022</td>\n",
       "      <td>471,005</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-21 12:38:48</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>70,550</td>\n",
       "      <td>0</td>\n",
       "      <td>134,983</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-19 16:29:22</td>\n",
       "      <td>스마트입금</td>\n",
       "      <td>한효전</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>200,000</td>\n",
       "      <td>205,533</td>\n",
       "      <td>천안중</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-11 23:12:55</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>배민페이머니</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>5,533</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-11 23:12:51</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>10,000</td>\n",
       "      <td>15,533</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-11 23:11:19</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>배민페이머니</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>5,533</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-11 20:50:36</td>\n",
       "      <td>기일출금</td>\n",
       "      <td>404007**27 ,2404-72회차</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20,000</td>\n",
       "      <td>0</td>\n",
       "      <td>15,533</td>\n",
       "      <td>청주종</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-09 11:17:33</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>136,378</td>\n",
       "      <td>0</td>\n",
       "      <td>35,533</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-09 11:17:25</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>150,000</td>\n",
       "      <td>171,911</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-09 11:09:48</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>배민페이머니</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20,000</td>\n",
       "      <td>0</td>\n",
       "      <td>21,911</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-09 11:09:21</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>20,000</td>\n",
       "      <td>41,911</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-08 22:56:28</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12,300</td>\n",
       "      <td>21,911</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-08 22:56:24</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,300</td>\n",
       "      <td>0</td>\n",
       "      <td>9,611</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-08 14:37:57</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,300</td>\n",
       "      <td>0</td>\n",
       "      <td>21,911</td>\n",
       "      <td>KB카드</td>\n",
       "      <td>취소된거래</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-08 14:28:31</td>\n",
       "      <td>FBS 출금</td>\n",
       "      <td>카카오페이</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10,000</td>\n",
       "      <td>0</td>\n",
       "      <td>34,211</td>\n",
       "      <td>임베디</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-08 10:13:53</td>\n",
       "      <td>기일출금</td>\n",
       "      <td>35460904034367</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6,550</td>\n",
       "      <td>0</td>\n",
       "      <td>44,211</td>\n",
       "      <td>수유동</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 23:04:12</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>카뱅오픈한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50,000</td>\n",
       "      <td>0</td>\n",
       "      <td>50,761</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 19:36:44</td>\n",
       "      <td>오픈뱅킹출금</td>\n",
       "      <td>카뱅오픈한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>900,000</td>\n",
       "      <td>0</td>\n",
       "      <td>100,761</td>\n",
       "      <td>스타뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 19:35:51</td>\n",
       "      <td>스마트입금</td>\n",
       "      <td>한효전</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1,000,000</td>\n",
       "      <td>1,000,761</td>\n",
       "      <td>천안중</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 12:40:17</td>\n",
       "      <td>체크카드</td>\n",
       "      <td>고속버스승차권(KOBUS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,300</td>\n",
       "      <td>0</td>\n",
       "      <td>761</td>\n",
       "      <td>KB카드</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-06 12:40:05</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>13,000</td>\n",
       "      <td>13,061</td>\n",
       "      <td>카뱅</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-03 12:56:19</td>\n",
       "      <td>스마트출금</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>한윤지</td>\n",
       "      <td>600,000</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>청주중</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>손아현</td>\n",
       "      <td>67890</td>\n",
       "      <td>2024-04-03 12:55:36</td>\n",
       "      <td>전자금융</td>\n",
       "      <td>임진희</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>600,000</td>\n",
       "      <td>600,061</td>\n",
       "      <td>신용협동</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      이름   계좌번호                 거래일시      적요                의뢰인/수취인 내통장표시내용  \\\n",
       "100  손아현  67890  2024-05-05 12:33:52    전자금융                    한윤지     NaN   \n",
       "101  손아현  67890  2024-05-04 19:48:41    체크카드                   탐앤탐스     NaN   \n",
       "102  손아현  67890  2024-05-04 12:37:25    체크카드                 바스켓테이블     NaN   \n",
       "103  손아현  67890  2024-05-04 11:24:42  FBS 출금                  카카오페이     NaN   \n",
       "104  손아현  67890  2024-05-03 15:45:42    체크카드                 공차국민대점     NaN   \n",
       "105  손아현  67890  2024-05-02 18:01:54    기일출금         35460904034367     NaN   \n",
       "106  손아현  67890  2024-05-02 10:30:17    체크카드             이마트24R국민대예     NaN   \n",
       "107  손아현  67890  2024-05-02 10:29:27    전자금융                    한윤지     NaN   \n",
       "108  손아현  67890  2024-05-01 20:05:16    체크카드                   탐앤탐스     NaN   \n",
       "109  손아현  67890  2024-05-01 19:25:14    체크카드              긴자료코성신여대점     NaN   \n",
       "110  손아현  67890  2024-05-01 16:32:42    체크카드                   카페엘리     NaN   \n",
       "111  손아현  67890  2024-05-01 15:42:07    체크카드               인터넷상거래_2     NaN   \n",
       "112  손아현  67890  2024-04-29 19:02:03    체크카드                   얼음왕국     NaN   \n",
       "113  손아현  67890  2024-04-29 18:53:45    체크카드                불닭엽기떡볶이     NaN   \n",
       "114  손아현  67890  2024-04-29 14:53:55    체크카드                   탐앤탐스     NaN   \n",
       "115  손아현  67890  2024-04-29 13:31:40    체크카드                   김밥천국     NaN   \n",
       "116  손아현  67890  2024-04-29 11:51:01    체크카드              티머니개인택시_0     NaN   \n",
       "117  손아현  67890  2024-04-29 11:48:21    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "118  손아현  67890  2024-04-28 12:32:29  FBS 출금                  카카오페이     NaN   \n",
       "119  손아현  67890  2024-04-27 16:39:28    체크카드                 리틀포레스트     NaN   \n",
       "120  손아현  67890  2024-04-27 16:22:51  FBS 출금                  카카오페이     NaN   \n",
       "121  손아현  67890  2024-04-27 15:52:24  오픈뱅킹출금                카뱅오픈한윤지     NaN   \n",
       "122  손아현  67890  2024-04-27 10:13:26    체크카드              쿠팡(와우멤버십)     NaN   \n",
       "123  손아현  67890  2024-04-25 10:36:18    기일입금                    한효전     NaN   \n",
       "124  손아현  67890  2024-04-24 11:06:02  FBS 출금                  카카오페이     NaN   \n",
       "125  손아현  67890  2024-04-22 20:02:23   FBS출금               KT통신요금04     NaN   \n",
       "126  손아현  67890  2024-04-22 19:57:09   FBS출금           KT4489689404     NaN   \n",
       "127  손아현  67890  2024-04-22 13:22:24    전자금융               1060국민카드     NaN   \n",
       "128  손아현  67890  2024-04-21 18:11:28    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "129  손아현  67890  2024-04-21 12:42:24  오픈뱅킹출금                카뱅오픈(주)     NaN   \n",
       "130  손아현  67890  2024-04-21 12:41:36    전자금융                    한윤지     NaN   \n",
       "131  손아현  67890  2024-04-21 12:38:48  FBS 출금                  카카오페이     NaN   \n",
       "132  손아현  67890  2024-04-19 16:29:22   스마트입금                    한효전     NaN   \n",
       "133  손아현  67890  2024-04-11 23:12:55  오픈뱅킹출금                 배민페이머니     NaN   \n",
       "134  손아현  67890  2024-04-11 23:12:51    전자금융                    한윤지     NaN   \n",
       "135  손아현  67890  2024-04-11 23:11:19  오픈뱅킹출금                 배민페이머니     NaN   \n",
       "136  손아현  67890  2024-04-11 20:50:36    기일출금  404007**27 ,2404-72회차     NaN   \n",
       "137  손아현  67890  2024-04-09 11:17:33  FBS 출금                  카카오페이     NaN   \n",
       "138  손아현  67890  2024-04-09 11:17:25    전자금융                    한윤지     NaN   \n",
       "139  손아현  67890  2024-04-09 11:09:48  오픈뱅킹출금                 배민페이머니     NaN   \n",
       "140  손아현  67890  2024-04-09 11:09:21    전자금융                    한윤지     NaN   \n",
       "141  손아현  67890  2024-04-08 22:56:28    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "142  손아현  67890  2024-04-08 22:56:24    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "143  손아현  67890  2024-04-08 14:37:57    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "144  손아현  67890  2024-04-08 14:28:31  FBS 출금                  카카오페이     NaN   \n",
       "145  손아현  67890  2024-04-08 10:13:53    기일출금         35460904034367     NaN   \n",
       "146  손아현  67890  2024-04-06 23:04:12  오픈뱅킹출금                카뱅오픈한윤지     NaN   \n",
       "147  손아현  67890  2024-04-06 19:36:44  오픈뱅킹출금                카뱅오픈한윤지     NaN   \n",
       "148  손아현  67890  2024-04-06 19:35:51   스마트입금                    한효전     NaN   \n",
       "149  손아현  67890  2024-04-06 12:40:17    체크카드          고속버스승차권(KOBUS     NaN   \n",
       "150  손아현  67890  2024-04-06 12:40:05    전자금융                    한윤지     NaN   \n",
       "151  손아현  67890  2024-04-03 12:56:19   스마트출금                    한윤지     한윤지   \n",
       "152  손아현  67890  2024-04-03 12:55:36    전자금융                    임진희     NaN   \n",
       "\n",
       "        출금금액       입금금액         잔액   취급점     구분  \n",
       "100        0     50,000     53,877    카뱅      　  \n",
       "101    5,000          0      3,877  KB카드      　  \n",
       "102    5,500          0      8,877  KB카드      　  \n",
       "103   10,000          0     14,377   임베디      　  \n",
       "104   12,200          0     24,377  KB카드      　  \n",
       "105   18,850          0     36,577   수유동      　  \n",
       "106    2,600          0     55,427  KB카드      　  \n",
       "107        0     50,000     58,027    카뱅      　  \n",
       "108    4,400          0      8,027  KB카드      　  \n",
       "109   13,000          0     12,427  KB카드      　  \n",
       "110    5,800          0     25,427  KB카드      　  \n",
       "111   10,000          0     31,227  KB카드      　  \n",
       "112    1,800          0     41,227  KB카드      　  \n",
       "113   18,000          0     43,027  KB카드      　  \n",
       "114    4,500          0     61,027  KB카드      　  \n",
       "115   11,000          0     65,527  KB카드      　  \n",
       "116   12,500          0     76,527  KB카드      　  \n",
       "117   17,200          0     89,027  KB카드      　  \n",
       "118   51,280          0    106,227   임베디      　  \n",
       "119    1,000          0    157,507  KB카드      　  \n",
       "120   42,199          0    158,507   임베디      　  \n",
       "121  400,000          0    200,706   스타뱅      　  \n",
       "122    4,990          0    600,706  KB카드      　  \n",
       "123        0    600,000    605,696   청주중      　  \n",
       "124   10,000          0      5,696   임베디      　  \n",
       "125   17,600          0     15,696   임베디      　  \n",
       "126   10,510          0     33,296   임베디      　  \n",
       "127        0          1     43,806  우리은행      　  \n",
       "128   17,200          0     43,805  KB카드      　  \n",
       "129  410,000          0     61,005   스타뱅      　  \n",
       "130        0    336,022    471,005    카뱅      　  \n",
       "131   70,550          0    134,983   임베디      　  \n",
       "132        0    200,000    205,533   천안중      　  \n",
       "133   10,000          0      5,533   스타뱅      　  \n",
       "134        0     10,000     15,533    카뱅      　  \n",
       "135   10,000          0      5,533   스타뱅      　  \n",
       "136   20,000          0     15,533   청주종      　  \n",
       "137  136,378          0     35,533   임베디      　  \n",
       "138        0    150,000    171,911    카뱅      　  \n",
       "139   20,000          0     21,911   스타뱅      　  \n",
       "140        0     20,000     41,911    카뱅      　  \n",
       "141        0     12,300     21,911  KB카드     취소  \n",
       "142   12,300          0      9,611  KB카드      　  \n",
       "143   12,300          0     21,911  KB카드  취소된거래  \n",
       "144   10,000          0     34,211   임베디      　  \n",
       "145    6,550          0     44,211   수유동      　  \n",
       "146   50,000          0     50,761   스타뱅      　  \n",
       "147  900,000          0    100,761   스타뱅      　  \n",
       "148        0  1,000,000  1,000,761   천안중      　  \n",
       "149   12,300          0        761  KB카드      　  \n",
       "150        0     13,000     13,061    카뱅      　  \n",
       "151  600,000          0         61   청주중      　  \n",
       "152        0    600,000    600,061  신용협동      　  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['이름']=='손아현']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install gradio openai python-dotenv langchain langchain_community sentence-transformers tabulate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # 서버 실행\n",
    "# uvicorn app:app --reload\n",
    "\n",
    "# # Gradio 애플리케이션 실행\n",
    "# python gradio_app.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. [로그인] 함수 설정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_db = {\n",
    "    \"한윤지\": \"12345\",  # 예시 사용자\n",
    "    \"손아현\": \"67890\"\n",
    "}\n",
    "\n",
    "def login(username, password):\n",
    "    if username in user_db and user_db[username] == password:\n",
    "        user_data = df[df[\"이름\"] == username]  # 사용자 이름으로 데이터 필터링\n",
    "        return f\"로그인 성공! 환영합니다, {username}님!\", gr.update(value=user_data, visible=True), gr.update(visible=True, value=plot_user_data(user_data))\n",
    "    else:\n",
    "        return \"로그인 실패! 사용자 이름 또는 비밀번호가 잘못되었습니다.\", gr.update(visible=False), gr.update(visible=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. [시각화/DF] 함수 설정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt  \n",
    "import seaborn as sns\n",
    "\n",
    "# \"입금금액\" -> \"Deposit Amount\"\n",
    "# \"출금금액\" -> \"Withdrawal Amount\"\n",
    "# \"거래일시\" -> \"Transaction Date\"\n",
    "\n",
    "def plot_user_data(user_data):\n",
    "    # 1. 데이터 정리\n",
    "    ## 거래일시를 datetime 형식으로 변환\n",
    "    user_data['거래일시'] = pd.to_datetime(user_data['거래일시'])\n",
    "    ## 거래일시에서 월과 일을 추출하여 새로운 컬럼 추가\n",
    "    user_data['거래월일'] = user_data['거래일시'].dt.strftime('%m-%d')\n",
    "\n",
    "    # 2. 입금금액과 출금금액을 각각 정렬하여 시각화\n",
    "    ## Seaborn 스타일 설정\n",
    "    sns.set_style(\"whitegrid\")  # \"whitegrid\" 스타일 설정\n",
    "    custom_palette = [\"navy\", \"orange\"]\n",
    "    sns.set_palette(custom_palette)\n",
    "\n",
    "    ## 시각화\n",
    "    # (ci=None으로 신뢰 구간 제거)\n",
    "    sns.lineplot(x=\"거래월일\", y=sorted(user_data['입금금액']), data=user_data, marker='o', label=\"Deposit Amount\", linewidth=2, ci=None)\n",
    "    sns.lineplot(x=\"거래월일\", y=sorted(user_data['출금금액']), data=user_data, marker='o', label=\"Withdrawal Amount\", linewidth=2, ci=None)\n",
    "    \n",
    "    plt.title(\"Visualization of Deposits and Withdrawals\")\n",
    "    plt.xlabel(\"Transaction Date (MM-DD)\")\n",
    "    plt.ylabel(\"Amount\")\n",
    "    plt.xticks(rotation=30)  # X축 레이블을 30도 회전하여 더 잘 보이도록 함\n",
    "    plt.legend()\n",
    "\n",
    "    plot_path = \"user_transaction_plot.png\"\n",
    "    plt.savefig(plot_path)\n",
    "    plt.close()\n",
    "    return plot_path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. 챗봇"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 [카드 추천] DB 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting faiss-cpu"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'DOSKEY'��(��) ���� �Ǵ� �ܺ� ����, ������ �� �ִ� ���α׷�, �Ǵ�\n",
      "��ġ ������ �ƴմϴ�.\n",
      "\n",
      "[notice] A new release of pip is available: 24.0 -> 24.2\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Downloading faiss_cpu-1.8.0.post1-cp39-cp39-win_amd64.whl.metadata (3.8 kB)\n",
      "Requirement already satisfied: numpy<2.0,>=1.0 in c:\\users\\user\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from faiss-cpu) (1.25.2)\n",
      "Requirement already satisfied: packaging in c:\\users\\user\\appdata\\roaming\\python\\python39\\site-packages (from faiss-cpu) (24.0)\n",
      "Downloading faiss_cpu-1.8.0.post1-cp39-cp39-win_amd64.whl (14.6 MB)\n",
      "   ---------------------------------------- 0.0/14.6 MB ? eta -:--:--\n",
      "   - -------------------------------------- 0.6/14.6 MB 19.5 MB/s eta 0:00:01\n",
      "   --- ------------------------------------ 1.2/14.6 MB 15.6 MB/s eta 0:00:01\n",
      "   ------ --------------------------------- 2.3/14.6 MB 16.5 MB/s eta 0:00:01\n",
      "   -------- ------------------------------- 3.1/14.6 MB 16.4 MB/s eta 0:00:01\n",
      "   ---------- ----------------------------- 3.9/14.6 MB 16.8 MB/s eta 0:00:01\n",
      "   ------------- -------------------------- 5.1/14.6 MB 18.0 MB/s eta 0:00:01\n",
      "   ----------------- ---------------------- 6.5/14.6 MB 18.8 MB/s eta 0:00:01\n",
      "   --------------------- ------------------ 7.9/14.6 MB 20.3 MB/s eta 0:00:01\n",
      "   ------------------------- -------------- 9.3/14.6 MB 21.3 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 10.9/14.6 MB 22.6 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 12.5/14.6 MB 26.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  14.3/14.6 MB 29.7 MB/s eta 0:00:01\n",
      "   ---------------------------------------  14.6/14.6 MB 29.8 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 14.6/14.6 MB 25.2 MB/s eta 0:00:00\n",
      "Installing collected packages: faiss-cpu\n",
      "Successfully installed faiss-cpu-1.8.0.post1\n"
     ]
    }
   ],
   "source": [
    "# !pip install faiss-cpu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "새로운 벡터 데이터베이스가 생성되어 'vectordb.pkl'로 저장되었습니다.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import fitz\n",
    "import pickle\n",
    "from langchain.embeddings import HuggingFaceEmbeddings\n",
    "from langchain.vectorstores import FAISS\n",
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "\n",
    "# PDF 파일을 로드하여 텍스트를 추출하는 함수\n",
    "def load_pdf(file_path):\n",
    "    if not os.path.exists(file_path):\n",
    "        raise FileNotFoundError(f\"파일을 찾을 수 없습니다: {file_path}\")\n",
    "    \n",
    "    if not file_path.lower().endswith('.pdf'):\n",
    "        raise ValueError(\"PDF 파일만 지원됩니다. 파일 확장자를 확인해주세요.\")\n",
    "\n",
    "    doc = fitz.open(file_path)\n",
    "    text = \"\"\n",
    "    for page in doc:\n",
    "        text += page.get_text()\n",
    "    doc.close()\n",
    "    return text\n",
    "\n",
    "# 문서 분할\n",
    "def split_documents(text):\n",
    "    text_splitter = RecursiveCharacterTextSplitter(\n",
    "        chunk_size=1000,\n",
    "        chunk_overlap=200,\n",
    "        length_function=len,\n",
    "    )\n",
    "    return text_splitter.split_text(text)\n",
    "\n",
    "# 벡터 데이터베이스 생성 및 업데이트 함수\n",
    "def create_or_update_vectordb(pdf_path=None, db_path=\"vectordb.pkl\"):\n",
    "    embeddings = HuggingFaceEmbeddings(model_name=\"intfloat/multilingual-e5-large\")\n",
    "    if not os.path.exists(db_path):\n",
    "        if pdf_path:\n",
    "            text = load_pdf(pdf_path)\n",
    "            chunks = split_documents(text)\n",
    "            if chunks:\n",
    "                vectordb = FAISS.from_texts(chunks, embeddings)\n",
    "                with open(db_path, \"wb\") as f:\n",
    "                    pickle.dump(vectordb, f)\n",
    "                print(f\"새로운 벡터 데이터베이스가 생성되어 '{db_path}'로 저장되었습니다.\")\n",
    "            else:\n",
    "                raise ValueError(\"PDF 파일에서 텍스트를 추출할 수 없습니다.\")\n",
    "        else:\n",
    "            raise ValueError(\"벡터 데이터베이스를 생성할 텍스트 데이터가 없습니다.\")\n",
    "    else:\n",
    "        with open(db_path, \"rb\") as f:\n",
    "            vectordb = pickle.load(f)\n",
    "    return vectordb\n",
    "\n",
    "\n",
    "# PDF 파일 경로 지정\n",
    "pdf_path = r\"C:\\Users\\USER\\Documents\\01_Academic\\11. XAI\\Toy Project\\카드pdf\\MyWESH.pdf\"\n",
    "vectordb = create_or_update_vectordb(pdf_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import fitz\n",
    "# path = r\"C:\\Users\\USER\\Documents\\01_Academic\\11. XAI\\Toy Project\\카드pdf\\MyWESH.pdf\"  # 업로드된 파일 경로 사용\n",
    "# doc = fitz.open(path)\n",
    "# for page in doc:\n",
    "#     text = page.get_text()\n",
    "#     print(text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 위 함수들 통합"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_card_documents(pdf_path, db_path=\"vectordb.pkl\"):\n",
    "    # 1. PDF에서 텍스트 추출\n",
    "    text = load_pdf(pdf_path)\n",
    "    \n",
    "    # 2. 텍스트 분할\n",
    "    chunks = split_documents(text)\n",
    "    \n",
    "    # 3. 벡터 데이터베이스 생성 또는 업데이트\n",
    "    vectordb = create_or_update_vectordb(pdf_path, db_path)\n",
    "    \n",
    "    return vectordb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 [카드 추천] 함수 설정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 거래 내역을 반환\n",
    "def get_transactions(name, account_number):\n",
    "    # return [\n",
    "    #     {\"date\": \"2024-08-01\", \"amount\": 1000, \"description\": \"급여\"},\n",
    "    #     {\"date\": \"2024-08-02\", \"amount\": -50, \"description\": \"식료품\"},\n",
    "    #     {\"date\": \"2024-08-03\", \"amount\": -30, \"description\": \"교통비\"},\n",
    "    # ]\n",
    "\n",
    "    # 데이터프레임에서 특정 계좌번호에 해당하는 거래 내역만 반환\n",
    "    filtered_transactions = df[(df['이름'] == name) & (df['계좌번호'] == account_number)]\n",
    "    return filtered_transactions\n",
    "\n",
    "# 카드 상품 반환\n",
    "def get_card_products(): \n",
    "    return ['여행 특화 카드', '해외 사용 시 5% 할인, 항공 마일리지 적립']\n",
    "\n",
    "# # 거래 내역 분석 및 카드 추천 함수\n",
    "# def analyze_transactions_and_recommend_card(transactions, card_products):\n",
    "#     transaction = get_transactions()\n",
    "#     card = get_card_products()\n",
    "#     prompt = f\"\"\"다음은 사용자의 계좌 거래 내역입니다:\n",
    "\n",
    "#                 {transaction}\n",
    "\n",
    "#                 다음은 사용 가능한 카드 상품 목록입니다:\n",
    "\n",
    "#                 {card}\n",
    "\n",
    "#                 이 거래 내역을 분석하고, 사용자의 소비 패턴에 가장 적합한 카드를 추천해주세요. \n",
    "#                 분석 결과와 카드 추천 이유를 상세히 설명해주세요.\"\"\"\n",
    "\n",
    "#     return generate_response(\"transaction_analysis\", prompt=prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 위 함수들 통합"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 카드 추천 함수\n",
    "def card_recommendation():\n",
    "    transactions = get_transactions(user_info[\"name\"], user_info[\"account_number\"])\n",
    "    card_products = get_card_products()\n",
    "\n",
    "    # analyze_transactions_and_recommend_card 함수 그냥 풀어서 씀\n",
    "    prompt = f\"\"\"다음은 사용자의 계좌 거래 내역입니다:\n",
    "\n",
    "                {transactions}\n",
    "\n",
    "                다음은 사용 가능한 카드 상품 목록입니다:\n",
    "\n",
    "                {card_products}\n",
    "\n",
    "                이 거래 내역을 분석하고, 사용자의 소비 패턴에 가장 적합한 카드를 추천해주세요. \n",
    "                분석 결과와 카드 추천 이유를 상세히 설명해주세요.\"\"\"\n",
    "\n",
    "    return generate_response(\"transaction_analysis\", prompt=prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 [챗봇] 함수 설정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\langchain_experimental\\agents\\agent_toolkits\\pandas\\base.py:283: UserWarning: Received additional kwargs {'output_parser': StrOutputParser()} which are no longer supported.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# 1. 사용자 정의 프롬프트 구성 (LLM 후처리용)\n",
    "## 에이전트가 생성한 분석 결과를 사용자가 이해하기 쉬운 형태로 변환\n",
    "post_processing_prompt = PromptTemplate(\n",
    "    input_variables=[\"analysis_result\"],\n",
    "    template=\"\"\"\n",
    "    다음은 은행 고객의 AI 비서가 생성한 분석 결과입니다:\n",
    "    {analysis_result}\n",
    "    이 결과를 바탕으로 고객이 쉽게 이해할 수 있도록 요약하고, 추가적으로 유용할 만한 정보를 제공하세요.\n",
    "    \"\"\"\n",
    ")\n",
    "\n",
    "\n",
    "# 에이전트 생성 (데이터프레임 분석 수행)\n",
    "agent = create_pandas_dataframe_agent(\n",
    "    llm=llm,                           \n",
    "    df=df,                             \n",
    "    verbose=True,                      \n",
    "    agent_type=AgentType.OPENAI_FUNCTIONS,\n",
    "    output_parser=StrOutputParser(),   \n",
    "    allow_dangerous_code=True )\n",
    "\n",
    "# 2. 분석과 관련 없는 일반적인 질문에 대해 답변 하도록\n",
    "main_prompt = ' 당신은 이름은 텅후루 입니다. 당신의 역할은 은행 고객의 AI비서가 생성한 분석 결과를 활용하여 대답하는 것입니다.'\n",
    "\n",
    "\n",
    "# 3. 질문이 분석과 관련된지 여부를 확인하는 LLM 프롬프트\n",
    "analysis_check_prompt = PromptTemplate(\n",
    "    input_variables=[\"input_query\"],\n",
    "    template=\"\"\"\n",
    "    아래의 질문이 데이터 분석과 관련이 있는지 아닌지를 판단해 주세요. \n",
    "    질문이 분석 관련이면 '분석 관련'이라고 대답하고, 그렇지 않으면 '일반 질문'이라고 대답하세요.\n",
    "\n",
    "    질문: {input_query}\n",
    "    답변: \n",
    "    \"\"\"\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 상태를 저장할 변수들\n",
    "user_info = {\"name\": \"\", \"account_number\": \"\"}\n",
    "transactions = []\n",
    "card_products = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 사용자 정보를 설정/입력받는 함수\n",
    "def set_user_info(message):\n",
    "    try:\n",
    "        name, account_number = [item.strip() for item in message.split(\",\")]\n",
    "        user_info[\"name\"] = name\n",
    "        user_info[\"account_number\"] = account_number\n",
    "        return True\n",
    "    except ValueError:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "get_ai_response, ask_question,  analyze_transactions_and_recommend_card의 기능을 통합\n",
    "\n",
    "-> 단일 함수로 AI 응답을 생성하도록"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QA 체인 설정 함수 (기존 유지)\n",
    "def get_qa_chain():\n",
    "    try:\n",
    "        with open(\"vectordb.pkl\", \"rb\") as f:\n",
    "            vectordb = pickle.load(f)\n",
    "\n",
    "        texts = [doc.page_content for doc in vectordb.docstore._dict.values()]\n",
    "        bm25_retriever = BM25Retriever.from_texts(texts)\n",
    "        bm25_retriever.k = 5\n",
    "\n",
    "        faiss_retriever = vectordb.as_retriever(search_kwargs={\"k\": 5})\n",
    "\n",
    "        ensemble_retriever = EnsembleRetriever(\n",
    "            retrievers=[bm25_retriever, faiss_retriever],\n",
    "            weights=[0.5, 0.5]\n",
    "        )\n",
    "\n",
    "        llm = ChatOpenAI(model_name=\"gpt-3.5-turbo\", temperature=0, openai_api_key=openai_api_key)\n",
    "\n",
    "        prompt_template = \"\"\"당신은 카드 추천 시스템입니다. PDF 문서의 내용을 기반으로 사용자의 소비 패턴과 요구에 맞는 카드를 추천해 주세요.\n",
    "        주어진 컨텍스트를 사용하여 질문에 정확하고 간결하게 답변해 주세요.\n",
    "\n",
    "        컨텍스트:\n",
    "        {context}\n",
    "\n",
    "        질문: {question}\n",
    "\n",
    "        답변:\"\"\"\n",
    "\n",
    "        PROMPT = PromptTemplate(\n",
    "            template=prompt_template, input_variables=[\"context\", \"question\"]\n",
    "        )\n",
    "        qa_chain = RetrievalQA.from_chain_type(\n",
    "            llm=llm,\n",
    "            chain_type=\"stuff\",\n",
    "            retriever=ensemble_retriever,\n",
    "            return_source_documents=True,\n",
    "            chain_type_kwargs={\"prompt\": PROMPT}\n",
    "        )\n",
    "        return qa_chain\n",
    "    except Exception as e:\n",
    "        return f\"QA 체인 설정 중 오류가 발생했습니다: {e}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 질문에 대한 답변을 생성하는 함수\n",
    "def ask_question(question):\n",
    "    return generate_response(\"qa_chain\", question=question)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 위 함수들 통합"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 통합된 챗봇 응답 생성 함수\n",
    "def generate_response(input_type, prompt=None, question=None):\n",
    "    \"\"\"\n",
    "    :param input_type: \"transaction_analysis\" 또는 \"qa_chain\" 중 하나\n",
    "    :param prompt: 거래 내역 분석 및 카드 추천에 사용될 프롬프트 (input_type이 \"transaction_analysis\"인 경우)\n",
    "    :param question: 질문 응답 체인에 사용될 질문 (input_type이 \"qa_chain\"인 경우)\n",
    "    :return: AI 응답 텍스트\n",
    "    \"\"\"\n",
    "    try:\n",
    "        if input_type == \"transaction_analysis\":\n",
    "            # 거래 내역 분석 및 카드 추천\n",
    "            response = ChatOpenAI(model_name=\"gpt-3.5-turbo\", temperature=0, openai_api_key=API_KEY)\n",
    "            return response.generate([prompt]).generations[0][0].text\n",
    "\n",
    "        elif input_type == \"qa_chain\":\n",
    "            # 질문 응답 체인 설정 및 응답 생성\n",
    "            qa_chain = get_qa_chain()\n",
    "            if isinstance(qa_chain, str):\n",
    "                return qa_chain  # 오류 메시지 반환\n",
    "            result = qa_chain({\"query\": question})\n",
    "            return result['result']\n",
    "\n",
    "    except Exception as e:\n",
    "        return f\"응답 생성 중 오류가 발생했습니다: {e}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 질문이 분석과 관련이 있는지 확인하는 함수\n",
    "def is_analysis_related(message):\n",
    "    try:\n",
    "        classification_response = llm.invoke(input=analysis_check_prompt.format(input_query=message))\n",
    "        classification_text = classification_response.content.strip()\n",
    "        return \"분석 관련\" in classification_text  # \"일반 질문\"이라면, 챗봇은 프롬프트에 따라 일반적인 답변을 제공\n",
    "    except Exception as e:\n",
    "        return f\"분석 요청 중 오류가 발생했습니다: {e}\"\n",
    "\n",
    "# QA 체인을 설정하고 실행하는 함수\n",
    "def run_qa_chain(message):\n",
    "    try:\n",
    "        qa_chain = get_qa_chain()\n",
    "        if isinstance(qa_chain, str):\n",
    "            return qa_chain  # 오류 메시지 반환\n",
    "        result = qa_chain({\"query\": message})\n",
    "        return result['result']\n",
    "    except Exception as e:\n",
    "        return f\"질문 처리 중 오류가 발생했습니다: {e}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 챗봇 기능 통합 함수\n",
    "## -> 병하 선배 'run_agent_continuously' 랑 합치기\n",
    "\n",
    "def chatbot_fn(message, history):\n",
    "    # 1. 사용자 정보 확인 및 설정\n",
    "    if not user_info.get(\"name\") or not user_info.get(\"account_number\"):\n",
    "        if not set_user_info(message):\n",
    "            return \"이름과 계좌번호를 올바른 형식으로 입력해주세요. (예: 이름, 계좌번호)\"\n",
    "        else:\n",
    "            return \"사용자 정보가 설정되었습니다. 추가로 질문이 있으면 입력해 주세요.\"\n",
    "\n",
    "    # 2. 카드 관련 키워드가 있는지 확인하고 card_recommendation 호출\n",
    "    if \"카드\" in message:\n",
    "        return card_recommendation()\n",
    "    \n",
    "    # 3. 질문이 분석 관련인지 확인하기\n",
    "    analysis_related_result = is_analysis_related(message)\n",
    "    if isinstance(analysis_related_result, str):\n",
    "        # 예외 발생 - 오류 메시지 반환\n",
    "        return analysis_related_result\n",
    "\n",
    "    if analysis_related_result:\n",
    "        # 에이전트를 사용하여 기본 df 분석 수행\n",
    "        try:\n",
    "            analysis_result = agent.run(\n",
    "                name=\"텅후루\",\n",
    "                role=\"사용자의 소비내역을 기반으로 여러가지 질문에 답하고 분석 정보를 제공하는 것\",\n",
    "                input=message\n",
    "            )\n",
    "\n",
    "            # LLM을 사용하여 에이전트 결과 후처리\n",
    "            final_response = llm.invoke(input=post_processing_prompt.format(analysis_result=analysis_result))\n",
    "            final_text = final_response.content.strip()\n",
    "        except Exception as e:\n",
    "            return f\"분석 후처리 중 오류가 발생했습니다: {e}\"\n",
    "    else:\n",
    "        # 분석과 관련 없는 질문에 대한 일반 답변 생성\n",
    "        final_text = generate_response(\"qa_chain\", question=message)\n",
    "\n",
    "    # 5. 사용자의 질문이 QA를 필요로 하는 경우 QA 체인을 통한 답변 생성\n",
    "    if \"질문\" in message:\n",
    "        final_text = run_qa_chain(message)\n",
    "\n",
    "    return final_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Gradio 인터페이스 설정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# '12345' \n",
    "# '67890'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running on local URL:  http://127.0.0.1:7860\n",
      "\n",
      "Could not create share link. Please check your internet connection or our status page: https://status.gradio.app.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"http://127.0.0.1:7860/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  user_data['거래일시'] = pd.to_datetime(user_data['거래일시'])\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  user_data['거래월일'] = user_data['거래일시'].dt.strftime('%m월 %d일')\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:23: FutureWarning: \n",
      "\n",
      "The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n",
      "\n",
      "  sns.lineplot(x=\"거래월일\", y=sorted(user_data['입금금액']), data=user_data, marker='o', label=\"Deposit Amount\", linewidth=2, ci=None)\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:24: FutureWarning: \n",
      "\n",
      "The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n",
      "\n",
      "  sns.lineplot(x=\"거래월일\", y=sorted(user_data['출금금액']), data=user_data, marker='o', label=\"Withdrawal Amount\", linewidth=2, ci=None)\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:32: UserWarning: Glyph 50900 (\\N{HANGUL SYLLABLE WEOL}) missing from current font.\n",
      "  plt.savefig(plot_path)\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\3243028567.py:32: UserWarning: Glyph 51068 (\\N{HANGUL SYLLABLE IL}) missing from current font.\n",
      "  plt.savefig(plot_path)\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22744\\813526735.py:25: LangChainDeprecationWarning: The method `Chain.run` was deprecated in langchain 0.1.0 and will be removed in 1.0. Use invoke instead.\n",
      "  analysis_result = agent.run(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n",
      "\u001b[32;1m\u001b[1;3m\n",
      "Invoking: `python_repl_ast` with `{'query': \"df['적요'].unique()\"}`\n",
      "responded: To analyze your spending pattern, we can start by looking at the categories of transactions in your dataframe `df`. Let's find out the unique values in the '적요' (description) column to see the different types of transactions you have made.\n",
      "\n",
      "\u001b[0m\u001b[36;1m\u001b[1;3m['체크카드' '스마트출금' '기일출금' 'FBS 출금' '기일입금' '스마트입금' '카드입금' 'FBS출금' '센타입금'\n",
      " '결산이자' '전자금융' '국민카드' '오픈뱅킹출금']\u001b[0m\u001b[32;1m\u001b[1;3mBased on the unique values in the '적요' (description) column, here are the different types of transactions you have made:\n",
      "1. 체크카드 (Debit Card)\n",
      "2. 스마트출금 (Smart Withdrawal)\n",
      "3. 기일출금 (Scheduled Withdrawal)\n",
      "4. FBS 출금\n",
      "5. 기일입금 (Scheduled Deposit)\n",
      "6. 스마트입금 (Smart Deposit)\n",
      "7. 카드입금 (Card Deposit)\n",
      "8. FBS출금\n",
      "9. 센타입금\n",
      "10. 결산이자 (Settlement Interest)\n",
      "11. 전자금융 (Electronic Finance)\n",
      "12. 국민카드 (National Card)\n",
      "13. 오픈뱅킹출금 (Open Banking Withdrawal)\n",
      "\n",
      "Next, we can analyze your spending pattern by calculating the total amount spent in each category. Would you like to proceed with this analysis?\u001b[0m\n",
      "\n",
      "\u001b[1m> Finished chain.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "with gr.Blocks() as demo:\n",
    "    # 1. 상단에 로그인 후 / 기본값으로 모든 소비 데이터를 표시\n",
    "    gr.Markdown(\"## 사용자 거래 데이터 및 로그인 시스템\")\n",
    "    with gr.Row():\n",
    "        # 오른쪽에 로그인 폼\n",
    "        username = gr.Textbox(label=\"사용자 이름\", placeholder=\"사용자 이름을 입력하세요\")\n",
    "        password = gr.Textbox(label=\"비밀번호\", type=\"password\", placeholder=\"비밀번호를 입력하세요\")\n",
    "        login_button = gr.Button(\"로그인\")\n",
    "        output = gr.Textbox(label=\"결과\", interactive=False)\n",
    "\n",
    "    with gr.Tabs():\n",
    "        with gr.Tab(label=\"데이터프레임\"):\n",
    "            user_data_table = gr.DataFrame(label=\"사용자 데이터\", visible=False, interactive=False)\n",
    "\n",
    "        with gr.Tab(label=\"시각화\"):\n",
    "            plot_output = gr.Image(label=\"시각화 결과\", visible=False)  # 시각화 결과를 위한 이미지 출력\n",
    "\n",
    "    # 로그인 버튼 클릭 후 화면에 변경사항이 나타나게 하기 위한 설정\n",
    "    login_button.click(fn=login, inputs=[username, password], \n",
    "                                 outputs=[output, user_data_table, plot_output])\n",
    "\n",
    "\n",
    "    # 2. 하단에 챗봇\n",
    "    with gr.Column():  \n",
    "        # Gradio interface\n",
    "        iface = gr.ChatInterface(\n",
    "            chatbot_fn,\n",
    "            title=\"통장이 텅텅 돈이 후루룩\",\n",
    "            description=\"안녕하세요! 챗봇 가계부 텅후룩입니다! 이름과 계좌번호를 '이름,계좌번호' 형식으로 입력해주세요.\",\n",
    "            theme=\"default\",\n",
    "            examples=[[\"고정지출을 분석해줘\"], [\"다음달 예상 지출 내역을 알려줘\"], ['나의 지출 패턴을 분석해줘'], [\"내 소비 패턴에 맞는 카드를 추천해줘\"], [\"포인트 적립이 높은 카드는 무엇인가요?\"]],\n",
    "\n",
    "            retry_btn=\"다시보내기 ↩\",\n",
    "            undo_btn=\"이전챗 삭제 ❌\",\n",
    "            clear_btn=\"전챗 삭제 💫\",\n",
    "        )\n",
    "    # with gr.Column():  \n",
    "    #     textbox=gr.Textbox(placeholder=\"어떤 것을 분석해드릴까요?\", container=False, scale=7),\n",
    "\n",
    "    \n",
    "# Launch Gradio interface\n",
    "demo.launch(debug=True, share=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
